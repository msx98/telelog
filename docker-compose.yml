services:

  postgres:
    build:
      context: ./MessageStore
      dockerfile: dockerfiles/postgres.Dockerfile
    restart: always
    env_file:
      - path: ./.env
        required: true
    ports:
      # <Port exposed> : <MySQL Port running inside container>
      #- "127.0.0.1:3306:3306"
      - "5200:5432"
      #- "172.69.128.2:3307:3306"
    volumes:
      - ./MessageStore/pgdata:/var/lib/postgresql/data
    networks:
      sqlnet:
        ipv4_address: 172.69.128.4

  mongo:
    image: mongo:7.0.8
    restart: always
    env_file:
      - path: ./.env
        required: true
    ports:
      - 8081:8081
      - 27017:27017
      #- "172.69.128.2:8081:8081"
    volumes:
      - ./MessageStore/mongodb:/data/db
    networks:
      sqlnet:
        ipv4_address: 172.69.128.3
  
  stocks:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.StocksFetch
    restart: always
    env_file:
      - path: ./.env
        required: true
      - path: ./.stocks.env
        required: true
    networks:
      sqlnet:
        ipv4_address: 172.69.128.19
    volumes:
      - ./MessageStore/stockdata:/stockdata

  chatbot:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.ChatBot
    restart: always
    volumes:
      - ./downloads:/downloads
    env_file:
      - path: ./.env
        required: true
      - path: ./.telegram.env
        required: true
    networks:
      sqlnet:
        ipv4_address: 172.69.128.10

  fetch:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.MessageFetchMulti
    restart: always
    env_file:
      - path: ./.env
        required: true
      - path: ./.telegram.env
        required: true
    networks:
      sqlnet:
        ipv4_address: 172.69.128.11

  multi:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.MessageFetchMulti
    restart: always
    env_file:
      - path: ./.env
        required: true
      - path: ./.telegram.env
        required: true
    networks:
      sqlnet:
        ipv4_address: 172.69.128.18

  refresh:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.MessageRefresh
    restart: always
    env_file:
      - path: ./.env
        required: true
      - path: ./.telegram.env
        required: true
    networks:
      sqlnet:
        ipv4_address: 172.69.128.16

  updatelinks:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.UpdateLinks
    restart: always
    env_file:
      - path: ./.env
        required: true
    networks:
      sqlnet:
        ipv4_address: 172.69.128.13

  embed:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.MessageEmbed
    restart: always
    env_file:
      - path: ./.env
        required: true
    networks:
      sqlnet:
        ipv4_address: 172.69.128.12
  
  hue:
    build:
      context: ./MessageStore/
      dockerfile: hue.Dockerfile
    hostname: hue
    container_name: hue
    #dns: 8.8.8.8
    ports:
      - "2222:8888"
    networks:
      sqlnet:
        ipv4_address: 172.69.128.5
    volumes:
      #- ./MessageStore/hue.ini:/usr/share/hue/desktop/conf/z-hue.ini
      - ./MessageStore/hue.ini:/usr/share/hue/desktop/conf/hue-overrides.ini

networks:
  sqlnet:
    external: false
    driver: bridge
    ipam:
      config:
        - subnet: 172.69.0.0/16
