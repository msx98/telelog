services:

  db:
    build:
      context: ./MessageStore
      dockerfile: Dockerfile
    restart: always
    env_file:
      - path: ./.env
        required: true
    ports:
      # <Port exposed> : <MySQL Port running inside container>
      #- "127.0.0.1:3306:3306"
      - "3308:3306"
      #- "172.69.128.2:3307:3306"
    volumes:
      - ./MessageStore/db:/var/lib/mysql
    networks:
      sqlnet:
        ipv4_address: 172.69.128.1

  postgres:
    build:
      context: ./MessageStore
      dockerfile: postgres.Dockerfile
    restart: always
    env_file:
      - path: ./.env
        required: true
    ports:
      # <Port exposed> : <MySQL Port running inside container>
      #- "127.0.0.1:3306:3306"
      - "5432:5432"
      #- "172.69.128.2:3307:3306"
    volumes:
      - ./MessageStore/pgdata:/var/lib/postgresql/data
    networks:
      sqlnet:
        ipv4_address: 172.69.128.4

  mongo:
    image: mongo:7.0.8
    restart: always
    env_file:
      - path: ./.env
        required: true
    ports:
      - 8081:8081
      - 27017:27017
      #- "172.69.128.2:8081:8081"
    volumes:
      - ./MessageStore/mongodb:/data/db
    networks:
      sqlnet:
        ipv4_address: 172.69.128.3
  
  message-fetch:
    build:
      context: ./MessageFetch
      dockerfile: Dockerfile
    restart: always
    environment:
      IS_DOCKER: true
    env_file:
      - path: ./.env
        required: true
    volumes:
      - ./MessageFetch/app:/app
    networks:
      sqlnet:
        ipv4_address: 172.69.128.2
    healthcheck:
      test: ["CMD", "python", "/app/mysql_healthcheck.py"]
      interval: 60s
      timeout: 30s
      retries: 3

networks:
  sqlnet:
    external: false
    driver: bridge
    ipam:
      config:
        - subnet: 172.69.0.0/16
